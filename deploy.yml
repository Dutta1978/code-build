#==================================================================================================
# Deploy:
# 
# 1.AWS EC2 and RDS public acess check
#
# 2.If EC2 and RDS detected with public access it gets stopped
#
# 3. Stopped resources logged in Dynamodb table and notification is sent via Slack and SNS
#
# (c) Enquizit, Inc 2021
# v1.0 2021-01-29
#===================================================================================================

AWSTemplateFormatVersion: '2010-09-09'
Description: Create a Cloud Watch rule and lambda function to detect instances in public subnets

#==================================================
# Setup the UI if the console is being used
#==================================================
Metadata:

  AWS::CloudFormation::Interface:

    ParameterGroups:
    - Label:
        default: Compliance
      Parameters:
      - pComplianceMode
    - Label:
        default: LogLevel
      Parameters:
      - pLogLevel
    - Label:
        default: RoleName
      Parameters:
      - pROLENAME     
    - Label:
        default: DynamoDB
      Parameters:
      - pHashKeyElementName
      - pHashKeyElementType
      - pRangeKeyElementName
      - pRangeKeyElementType
      - pTableName         

    ParameterLabels:
      pComplianceMode:
        default: ComplianceMode for Lambda
      pLogLevel:
        default: Log level for Lambda
      pROLENAME:
        default: Assume Role for Lambda        
      pHashKeyElementName:
        default: PrimaryKey Name
      pHashKeyElementType:
        default: PrimaryKey Type
      pRangeKeyElementName:
        default: SortKey Name
      pRangeKeyElementType:
        default: SortKey Type                  
      pTableName:
        default: Table Name for DynamoDB        


#==================================================
# Parameters
#==================================================
Parameters:       

  pComplianceMode:
    Description: set as environnment variable to run lambda in compliance mode
    Type: String
    Default: true
    AllowedValues: [true, false]

  pLogLevel:
    Description: set as environnment variable for lambda logging
    Type: String
    Default: Info

  pHashKeyElementName:
    Description: HashType PrimaryKey Name
    Type: String
    Default: AccountId

  pRangeKeyElementName:
    Description: HashType PrimaryKey Name
    Type: String
    Default: InstanceId    

  pHashKeyElementType:
    Description: HashType PrimaryKey Type
    Type: String
    Default: S

  pRangeKeyElementType:
    Description: RangeType SortKey Type
    Type: String
    Default: S    

  pTableName:
    Description: Table Name for DynamoDB
    Type: String
    Default: HUITPublicResourceCheck        


  pROLENAME:
    Description:  A unique Tag Key for the RoleArn. Please note the key is case-sensitive.
    Type: String
    Default: OrganizationAccountAccessRole

  pSlackURL:
    Description: Slack URL
    Type: String
    Default: https://hooks.slack.com/services/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

  pSendToSlack:
    Description: Send audit and compliance messages to Slack channel
    Type: String
    Default: true
    AllowedValues:
    - true
    - false

  pSendToSns:
    Description: Send audit and compliance messages to Slack channel
    Type: String
    Default: true
    AllowedValues:
    - true
    - false

  pSNSTopicArn:
    Description: SNS Topic Arn
    Type: String
    Default: arn:aws:sns:us-east-1:224233068863:sh-topic



  # pS3Bucket:
  #   Description: S3 bucket
  #   Type: String
  #   Default: arn:aws:s3:::bill-report-by-application-bucket-shaishav                             


#==================================================
# Resources
#==================================================
Resources:

  rCustomEventBus:    
    Type: AWS::Events::EventBus
    Properties: 
        Name: HUITEventBus 


  rEventBusPolicy:
    Type: AWS::Events::EventBusPolicy
    DependsOn: rCustomEventBus
    Properties:
        EventBusName: HUITEventBus
        StatementId: "PolicyforCustomEventBus"
        Principal: "*"
        Action: events:PutEvents
        Condition:              
          Key: aws:PrincipalOrgID
          Type: StringEquals
          Value: !Ref pOrgId

  rEC2EventRule:
    Type: AWS::Events::Rule
    DependsOn: rCFAutoStop
    Properties:
      Description: Trigger a Lambda function anytime a new EC2 resource is created
      EventBusName: !Ref rCustomEventBus
      EventPattern:
        source:
          - aws.ec2
        detail-type:
          - EC2 Instance State-change Notification
        detail:
          state:
            - running  
      State: ENABLED
      Targets:
        - Arn: !GetAtt rCFAutoStop.Arn
          Id: Lambda

  rPermissionForEventsToInvokeLambdaEC2:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref rCFAutoStop
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt rEC2EventRule.Arn

  rRDSEventRule:
    Type: AWS::Events::Rule
    DependsOn: rCFAutoStop 
    Properties: 
      Description: Trigger a Lambda function anytime a new RDS resource is created
      EventBusName: !Ref rCustomEventBus      
      EventPattern:
        source:
          - aws.rds
        detail-type:
          - AWS API Call via CloudTrail
        detail:  
          eventSource: 
            - rds.amazonaws.com
          eventName:
            - CreateDBInstance              
      State: ENABLED
      Targets: 
        - Arn: !GetAtt rCFAutoStop.Arn
          Id: LambdaV1

  rPermissionForEventsToInvokeLambdaRDS: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref rCFAutoStop
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt rRDSEventRule.Arn            

  rCFAutoStop:
    Type: AWS::Lambda::Function
    DependsOn: rStateMachine
    Properties:
      Handler: main.lambda_handler
      Runtime: python3.8
      Timeout: 300       
      Environment:
        Variables:
          ComplianceMode: !Ref pComplianceMode
          LogLevel: !Ref pLogLevel
          RoleName: !Ref pROLENAME
          SendToSlack: !Ref pSendToSlack
          SendToSNS: !Ref pSendToSns
          SlackURL: !Ref pSlackURL
          Topic: !Ref pSNSTopicArn
          ExceptionTag: !Ref pExceptionTag
          STEPFUNCTION_ARN: !GetAtt rStateMachine.Arn
      Role: !GetAtt rLambdaRole.Arn
      # Code:
      #   S3Bucket: !Ref pS3Bucket
      #   S3Key: !Ref pS3Key

  rretrieverdsinstancestate:
    Type: AWS::Lambda::Function
    Properties:
      Description: Retreive RDS Instance state 
      Code:
        ZipFile: |
          import boto3
          import logging
          import os
          import json

          logger = logging.getLogger()
          loglevel = os.environ.get('loglevel', 'INFO')  # will set default level of 'INFO' if env variable is not set 
          logger.setLevel(loging.INFO)

          def lambda_handler(event,context):
            Logger.info(event)
            accountid = event['accountid']
            sts_connection = boto3.client('sts')
            role_name = os.environ.get('RoleName').strip()
            RoleArn = f"arn:aws:iam::{accountid}:role/{role_name}"
            acct = sts_connection.assume_role(
            RoleArn = RoleArn,
            RoleSessionName =f"EventSession{accountid}"
            )

            credentials = acct['Credentials']

            rds = boto3.client(
            'rds',
            aws_access_key_id = credentials['AccessKeyId'],
            aws_secret_access_key= credentials['SecretAccessKey'],
            aws_session_token= credentials['SessionToken']
            )

            rdsInstanceId = event['rdsInstanceId']
            db_instances = rds.describe_db_instances(DBInstanceIdentifier= rdsInstanceId)['DBInstances']
            db_instance = db_instances[0]
            rdsInstanceState = db_instance['DBInstanceStatus']

            return{
              'statusCode': 200,
              'rdsInstanceState': rdsInstanceState,
              'rdsInstanceId': rdsInstanceId,
              'accountid': accountid
            }

                                                    
      Handler: lambda.handler
      Role: !GetAtt rLambdaRole.Arn
      Runtime: python3.8
      Timeout: 300
      Environment:
        Variables:
          RoleName: !Sub ${pROLENAME}

  rstoprdsinstance:
    Type: AWS::Lambda::Function
    Properties:
      Description: Stop RDS Instance state when it'sin available state
      Code:
        ZipFile: |
          import boto3
          import logging
          import os
          import json

          logger = logging.getLogger()
          loglevel = os.environ.get('loglevel', 'INFO')  # will set default level of 'INFO' if env variable is not set 
          logger.setLevel(loging.INFO)

          def lambda_handler(event,context):
            Logger.info(event)
            accountid = event['accountid']
            sts_connection = boto3.client('sts')
            role_name = os.environ.get('RoleName').strip()
            RoleArn = f"arn:aws:iam::{accountid}:role/{role_name}"
            acct = sts_connection.assume_role(
            RoleArn = RoleArn,
            RoleSessionName =f"EventSession{accountid}"
            )

            credentials = acct['Credentials']

            rds = boto3.client(
            'rds',
            aws_access_key_id = credentials['AccessKeyId'],
            aws_secret_access_key= credentials['SecretAccessKey'],
            aws_session_token= credentials['SessionToken']
            )

            rdsInstanceId = event['rdsInstanceId']

            rds.stop_db_instance(DBInstanceIdentifier=rdsInstanceId)


            return{
              'statusCode': 200,
              'rdsInstanceId': rdsInstanceId,
              'accountid': accountid
            }

                                                    
      Handler: lambda.handler
      Role: !GetAtt rLambdaRole.Arn
      Runtime: python3.8
      Timeout: 300
      Environment:
        Variables:
          RoleName: !Sub ${pROLENAME}                        

  rLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: 
              - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: LambdaDynamo
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:BatchWriteItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource: !GetAtt rDynamoDBTable.Arn
        - PolicyName: LambdaEC2
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeInstanceStatus
                  - ec2:StopInstances
                  - ec2:DescribeRouteTables
                Resource: '*'
        - PolicyName: LambdaRDS
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - rds:AddTagsToResource
                  - rds:DescribeDBInstances
                  - rds:StopDBInstance
                  - states:StartExecution
                Resource: '*'                                
        - PolicyName: LambdaAssumeRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource: "*" 
        - PolicyName: LambdaSNS
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: '*'                                          
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  rDynamoDBTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AttributeDefinitions:
      - AttributeName: AccountId
        AttributeType: S
      - AttributeName: DateTime
        AttributeType: S       
      KeySchema:
      - AttributeName: AccountId
        KeyType: HASH
      - AttributeName: DateTime
        KeyType: RANGE        
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 10
      TableName: !Ref pTableName

  rStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: [states.amazonaws.com]
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref rLambdaStateMachinePolicy

  rLambdaStateMachinePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - 
          Effect: Allow
          Action:
          - lambda:InvokeFunction
          Resource: '*'      

  rStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt rStateMachineRole.Arn     
      DefinitionString:

        !Sub
          - |-
            {
              "Comment": "Check dbstatus",
              "StartAt": "Wait",
              "States": {
                "Wait": {
                  "Type": "Wait",
                  "Seconds": 120,
                  "Next": "retrieveRdsInstanceState"
                },
                 "retrieveRdsInstanceState": {
                  "Type": "Task",
                  "Resource": "arn:aws:lambda:us-east-1:224233068863:function:retrieve-rds-instance-state-lambda",
                  "Next": "isInstanceAvailable"
                },
                "isInstanceAvailable": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.rdsInstanceState",
                      "StringEquals": "available",
                      "Next": "stopRDSInstance"
                    }
                  ],
                  "Default": "waitFiveMinutes"
                },
                "waitFiveMinutes": {
                  "Type": "Wait",
                  "Seconds": 300,
                  "Next": "retrieveRdsInstanceState"
                },
                 "stopRDSInstance":{
                    "Type": "Task",
                    "Resource": "arn:aws:lambda:us-east-1:224233068863:function:stop_rds",
                    "Next": "retrieveRDSInstanceStateStopping"
                    },
                  "retrieveRDSInstanceStateStopping":{
                  "Type": "Task",
                  "Resource": "arn:aws:lambda:us-east-1:224233068863:function:retrieve-rds-instance-state-lambda",
                  "Next": "IsInstanceStopped"
                },
                
                "IsInstanceStopped": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.rdsInstanceState",
                      "StringEquals": "stopped",
                      "Next": "Done"
                    }
                  ],
                  "Default": "waitFiveMinutesStopping"
                },
                  "waitFiveMinutesStopping": {
                  "Type": "Wait",
                  "Seconds": 300,
                  "Next": "retrieveRDSInstanceStateStopping"
                },
                "Done": {
                  "Type": "Pass",
                  "End": true
                }

              }
            }
          -
            retrieve_rds_instance_state_arn: !GetAtt rretrieverdsinstancestate.Arn
            stop_rds_instance_arn: !GetAtt rstoprdsinstance.Arn
          





                 

  
